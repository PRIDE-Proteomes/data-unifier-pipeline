<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:batch="http://www.springframework.org/schema/batch"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd">


    <!-- Step to generate the symbolic peptides in PRIDE Proteomes -->
    <!-- The input data is the peptide variants located in the PRIDE Proteomes DB. -->
    <batch:step id="partitionSymbolicPeptideFilterStep">
        <batch:tasklet start-limit="5" transaction-manager="transactionManager">
            <batch:chunk reader="symbolicPeptideFilterReader"
                         processor="symbolicPeptideFilterValidator"
                         writer="symbolicPeptideFilterUpdater"
                         commit-interval="10" skip-limit="99999">
                <batch:skippable-exception-classes>
                    <batch:include class="org.springframework.batch.item.validator.ValidationException"/>
                </batch:skippable-exception-classes>
            </batch:chunk>
        </batch:tasklet>
        <batch:listeners>
            <batch:listener ref="stepListener"/>
            <batch:listener ref="writeListener"/>
        </batch:listeners>
    </batch:step>

    <!--Beans for symbolic peptides generation -->
    <!-- reader -->
    <!--We prefer JdbcPagingItemReader vs JdbcCursorItemReader because is thread safe-->
    <bean id="symbolicPeptideFilterReader" scope="step"
          class="org.springframework.batch.item.database.JdbcPagingItemReader">
        <property name="dataSource" ref="proteomesDataSource"/>
        <property name="queryProvider">
            <bean class="org.springframework.batch.item.database.support.OraclePagingQueryProvider">
                <!--<property name="dataSource" ref="proteomesDataSource"/>-->
                <property name="selectClause">
                    <value>
                        <![CDATA[
                            PEPTIDE.SEQUENCE, TAXID
                        ]]>
                    </value>
                </property>
                <property name="fromClause" >
                <value>
                    <![CDATA[
                        PRIDEPROT.PEPTIDE,
                        (select PEPTIDE.SEQUENCE as SEQUENCE, count(PEPTIDE.SEQUENCE) as SEQ_NUM
                        from PRIDEPROT.PEPTIDE, PRIDEPROT.PEP_MOD
                        where
                        TAXID = :taxid
                        and PEPTIDE.PEPTIDE_ID=PEP_MOD.PEPTIDE_ID
                        and not PEP_MOD.POSITION between 1 and length(PEPTIDE.SEQUENCE)
                        group by PEPTIDE.SEQUENCE) PEP_TERM_MODS
                       ]]>
                </value>
                </property>
                <!--When we generate the input from the peptides we need to be sure about the species-->
                <property name="whereClause">
                    <value>
                        <![CDATA[
                                PEPTIDE.SEQUENCE in PEP_TERM_MODS.SEQUENCE
                                and PEPTIDE.SYMBOLIC='FALSE'
                                and TAXID = :taxid
                       ]]>
                    </value>
                </property>
                <property name="groupClause" >
                    <value>
                        <![CDATA[
                        PEPTIDE.SEQUENCE,PEP_TERM_MODS.SEQ_NUM,TAXID
                        having (count(PEPTIDE.SEQUENCE)-(PEP_TERM_MODS.SEQ_NUM))=0
                        ]]>
                    </value>
                </property>
                <property name="sortKeys">
                    <map>
                        <entry key="SEQUENCE" value="ASCENDING" />
                    </map>
                </property>
            </bean>
        </property>
        <property name="parameterValues">
            <map>
                <entry key="taxid" value="#{stepExecutionContext['taxid']}"/>
            </map>
        </property>
        <property name="pageSize" value="10"/>
        <property name="rowMapper">
            <bean class="uk.ac.ebi.pride.proteomes.pipeline.unifier.symbolic.generator.SymbolicPeptideRowMapper"/>
        </property>
        <property name="fetchSize" value="500"/>
    </bean>

    <!-- validator/processor -->
    <bean id="symbolicPeptideFilterValidator"
          class="org.springframework.batch.item.validator.ValidatingItemProcessor">
        <property name="filter" value="false"/>
        <property name="validator" ref="defaultValidator"/>
    </bean>

    <!-- writer -->
    <!--We don't write in the DB, because we only update in the processor step-->
    <!--<bean id="symbolicPeptideFilterWriter">-->
    <!--</bean>-->

    <bean id="symbolicPeptideFilterUpdater" class="uk.ac.ebi.pride.proteomes.pipeline.unifier.symbolic.filter.SymbolicPeptideFilterUpdater"/>

</beans>
