<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/batch
       http://www.springframework.org/schema/batch/spring-batch.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <batch:step id="partitionReleaseReportPeptideMappingStep">
        <batch:tasklet start-limit="5" transaction-manager="transactionManager">
            <batch:chunk reader="releaseReportPeptideMappingReader"
                         processor="releaseReportPeptideMappingReportCompositeItemProcessor"
                         writer="releaseReportPeptideMappingWriter"
                         commit-interval="250" skip-limit="99999">
                <batch:skippable-exception-classes>
                    <batch:include class="org.springframework.batch.item.validator.ValidationException"/>
                </batch:skippable-exception-classes>
            </batch:chunk>
        </batch:tasklet>
        <batch:listeners>
            <batch:listener ref="stepListener"/>
            <batch:listener ref="writeListener"/>
            <batch:listener ref="headerCallback"/>
        </batch:listeners>
    </batch:step>

    <!-- reader -->
    <bean id="releaseReportPeptideMappingReader" scope="step"
          class="org.springframework.batch.item.database.JdbcPagingItemReader">
        <property name="dataSource" ref="proteomesDataSource"/>
        <property name="queryProvider">
            <bean class="org.springframework.batch.item.database.support.SqlPagingQueryProviderFactoryBean">
                <property name="dataSource" ref="proteomesDataSource"/>
                <property name="selectClause">
                    <value>
                        <![CDATA[
                            PEPTIDE.PEPTIDE_ID AS PEPTIDE_ID,
                            PEPTIDE.SEQUENCE AS PEPTIDE_SEQUENCE,
                            PEP_PROT.START_POSITION AS START_POSITION,
                            PEP_PROT.UNIQUENESS AS NUM_PROTEIN_MAPPINGS,
                            PEP_PROT.PROTEIN_ID AS PROTEIN_ACCESSION,
                            PROTEIN.EVIDENCE AS PROTEIN_EVIDENCE,
                            PROT_GENES.PROT_GROUP_ID AS GENE_ID,
                            PEPTIDE.TAXID AS TAXID
                        ]]>
                    </value>
                </property>
                <property name="fromClause" >
                    <value>
                        <![CDATA[
                            PRIDEPROT.PEPTIDE,
                            PRIDEPROT.PEP_PROT,
                            PRIDEPROT.PROTEIN LEFT JOIN
                            (SELECT
                                PROT_PGRP.PROT_GROUP_ID,
                                PROTEIN_ID
                            FROM
                                PRIDEPROT.PROT_GROUP,
                                PRIDEPROT.PROT_PGRP
                            WHERE
                                PROT_GROUP.PROT_GROUP_ID = PROT_PGRP.PROT_GROUP_ID
                                AND PROT_GROUP.PROT_GROUP_TYPE='GENE'
                            ) PROT_GENES
                            ON PROT_GENES.PROTEIN_ID = PROTEIN.PROTEIN_ID AND PROTEIN.CONTAMINANT = 'F'
                           ]]>
                    </value>
                </property>
                <!--When we generate the input from the peptides we need to be sure about the species-->
                <property name="whereClause">
                    <value>
                        <![CDATA[
                            PEPTIDE.PEPTIDE_ID = PEP_PROT.PEPTIDE_ID
                            and PROTEIN.PROTEIN_ID = PEP_PROT.PROTEIN_ID
                            and PEPTIDE.SYMBOLIC='TRUE'
                            and PEPTIDE.TAXID = :taxid
                       ]]>
                    </value>
                </property>
                <property name="sortKeys">
                    <map>
                        <entry key="PEPTIDE_SEQUENCE" value="ASCENDING" />
                    </map>
                </property>
            </bean>
        </property>
        <property name="parameterValues">
            <map>
                <entry key="taxid" value="#{stepExecutionContext['taxid']}"/>
            </map>
        </property>
        <property name="pageSize" value="500"/>
        <property name="rowMapper">
            <bean class="uk.ac.ebi.pride.proteomes.pipeline.unifier.release.report.PeptideMappingRowMapper"/>
        </property>
        <property name="fetchSize" value="1000"/>
    </bean>

    <!-- processor -->
    <bean id="releaseReportPeptideMappingReportCompositeItemProcessor"
          class="org.springframework.batch.item.support.CompositeItemProcessor">
        <property name="delegates">
            <list>
                <ref bean="releaseReportPeptideMappingValidator"/>
                <ref bean="releaseReportPeptideMappingProcessor"/>
            </list>
        </property>
    </bean>

    <!-- validator/processor -->
    <bean id="releaseReportPeptideMappingValidator"
          class="org.springframework.batch.item.validator.ValidatingItemProcessor">
        <property name="filter" value="false"/>
        <property name="validator" ref="defaultValidator"/>
    </bean>

    <bean id="releaseReportPeptideMappingProcessor"
          class="uk.ac.ebi.pride.proteomes.pipeline.unifier.release.report.PeptideMappingProcessor"/>


    <!-- writer -->
    <bean id="releaseReportPeptideMappingWriter"  scope="step" class="org.springframework.batch.item.file.FlatFileItemWriter">
        <property name="resource"
                  value="file:${output.file.dir}#{stepExecutionContext['taxid']}/${peptide.mapping.report.prefix}#{stepExecutionContext['taxid']}${peptide.mapping.report.postfix}.tsv"/>
        <property name="headerCallback" ref="headerCallback"/>
        <property name="lineAggregator">
            <bean class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
                <property name="delimiter">
                    <util:constant
                            static-field="org.springframework.batch.item.file.transform.DelimitedLineTokenizer.DELIMITER_TAB"/>
                </property>
                <property name="fieldExtractor">
                    <bean class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
                        <property name="names"
                                  value="peptideSequence, startPosition, length, numProteinMappings, uniquePeptideToProtein, proteinAccession, proteinEvidence, gene, tissues, taxid"/>
                    </bean>
                </property>
            </bean>

        </property>
    </bean>


    <bean id="headerCallback"
          class="uk.ac.ebi.pride.proteomes.pipeline.unifier.release.report.callback.ReleaseReportPeptideMappingHeaderCallback"/>
</beans>
